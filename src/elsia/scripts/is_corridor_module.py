#!/usr/bin/env python
import rospy
from std_msgs.msg import String
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
import math as m
import numpy as np
from heapq import heappush, heappop
import time

rospy.init_node("is_corridor_module_node")
is_corridor_pub = rospy.Publisher("/is_corridor", String, queue_size = 10)
ang_vector = [-3.141592653589793, -3.132853877852213, -3.124115102114633, -3.115376326377053, -3.1066375506394728, -3.0978987749018927, -3.0891599991643126, -3.0804212234267325, -3.0716824476891524, -3.0629436719515724, -3.0542048962139923, -3.045466120476412, -3.036727344738832, -3.027988569001252, -3.019249793263672, -3.010511017526092, -3.0017722417885118, -2.9930334660509317, -2.9842946903133516, -2.9755559145757715, -2.9668171388381914, -2.9580783631006113, -2.9493395873630313, -2.940600811625451, -2.931862035887871, -2.923123260150291, -2.914384484412711, -2.905645708675131, -2.8969069329375507, -2.8881681571999707, -2.8794293814623906, -2.8706906057248105, -2.8619518299872304, -2.8532130542496503, -2.8444742785120702, -2.83573550277449, -2.82699672703691, -2.81825795129933, -2.80951917556175, -2.80078039982417, -2.7920416240865897, -2.7833028483490097, -2.7745640726114296, -2.7658252968738495, -2.7570865211362694, -2.7483477453986893, -2.7396089696611092, -2.730870193923529, -2.722131418185949, -2.713392642448369, -2.704653866710789, -2.695915090973209, -2.6871763152356287, -2.6784375394980486, -2.6696987637604686, -2.6609599880228885, -2.6522212122853084, -2.6434824365477283, -2.634743660810148, -2.626004885072568, -2.617266109334988, -2.608527333597408, -2.599788557859828, -2.591049782122248, -2.5823110063846677, -2.5735722306470876, -2.5648334549095075, -2.5560946791719275, -2.5473559034343474, -2.5386171276967673, -2.529878351959187, -2.521139576221607, -2.512400800484027, -2.503662024746447, -2.494923249008867, -2.4861844732712868, -2.4774456975337067, -2.4687069217961266, -2.4599681460585465, -2.4512293703209664, -2.4424905945833864, -2.4337518188458063, -2.425013043108226, -2.416274267370646, -2.407535491633066, -2.398796715895486, -2.390057940157906, -2.3813191644203258, -2.3725803886827457, -2.3638416129451656, -2.3551028372075855, -2.3463640614700054, -2.3376252857324253, -2.3288865099948453, -2.320147734257265, -2.311408958519685, -2.302670182782105, -2.293931407044525, -2.285192631306945, -2.2764538555693647, -2.2677150798317847, -2.2589763040942046, -2.2502375283566245, -2.2414987526190444, -2.2327599768814643, -2.2240212011438842, -2.215282425406304, -2.206543649668724, -2.197804873931144, -2.189066098193564, -2.180327322455984, -2.1715885467184037, -2.1628497709808236, -2.1541109952432436, -2.1453722195056635, -2.1366334437680834, -2.1278946680305033, -2.1191558922929232, -2.110417116555343, -2.101678340817763, -2.092939565080183, -2.084200789342603, -2.075462013605023, -2.0667232378674427, -2.0579844621298626, -2.0492456863922826, -2.0405069106547025, -2.0317681349171224, -2.0230293591795423, -2.014290583441962, -2.005551807704382, -1.996813031966802, -1.988074256229222, -1.9793354804916419, -1.9705967047540618, -1.9618579290164817, -1.9531191532789016, -1.9443803775413215, -1.9356416018037415, -1.9269028260661614, -1.9181640503285813, -1.9094252745910012, -1.9006864988534211, -1.891947723115841, -1.883208947378261, -1.8744701716406809, -1.8657313959031008, -1.8569926201655207, -1.8482538444279406, -1.8395150686903605, -1.8307762929527804, -1.8220375172152004, -1.8132987414776203, -1.8045599657400402, -1.79582119000246, -1.78708241426488, -1.7783436385273, -1.7696048627897198, -1.7608660870521398, -1.7521273113145597, -1.7433885355769796, -1.7346497598393995, -1.7259109841018194, -1.7171722083642393, -1.7084334326266593, -1.6996946568890792, -1.690955881151499, -1.682217105413919, -1.673478329676339, -1.6647395539387588, -1.6560007782011787, -1.6472620024635987, -1.6385232267260186, -1.6297844509884385, -1.6210456752508584, -1.6123068995132783, -1.6035681237756982, -1.5948293480381182, -1.586090572300538, -1.577351796562958, -1.568613020825378, -1.5598742450877978, -1.5511354693502177, -1.5423966936126376, -1.5336579178750576, -1.5249191421374775, -1.5161803663998974, -1.5074415906623173, -1.4987028149247372, -1.4899640391871571, -1.481225263449577, -1.472486487711997, -1.4637477119744169, -1.4550089362368368, -1.4462701604992567, -1.4375313847616766, -1.4287926090240965, -1.4200538332865165, -1.4113150575489364, -1.4025762818113563, -1.3938375060737762, -1.3850987303361961, -1.376359954598616, -1.367621178861036, -1.3588824031234559, -1.3501436273858758, -1.3414048516482957, -1.3326660759107156, -1.3239273001731355, -1.3151885244355555, -1.3064497486979754, -1.2977109729603953, -1.2889721972228152, -1.2802334214852351, -1.271494645747655, -1.262755870010075, -1.2540170942724949, -1.2452783185349148, -1.2365395427973347, -1.2278007670597546, -1.2190619913221745, -1.2103232155845944, -1.2015844398470144, -1.1928456641094343, -1.1841068883718542, -1.175368112634274, -1.166629336896694, -1.157890561159114, -1.1491517854215338, -1.1404130096839538, -1.1316742339463737, -1.1229354582087936, -1.1141966824712135, -1.1054579067336334, -1.0967191309960533, -1.0879803552584733, -1.0792415795208932, -1.070502803783313, -1.061764028045733, -1.053025252308153, -1.0442864765705728, -1.0355477008329927, -1.0268089250954127, -1.0180701493578326, -1.0093313736202525, -1.0005925978826724, -0.9918538221450924, -0.9831150464075125, -0.9743762706699325, -0.9656374949323525, -0.9568987191947725, -0.9481599434571926, -0.9394211677196126, -0.9306823919820326, -0.9219436162444526, -0.9132048405068727, -0.9044660647692927, -0.8957272890317127, -0.8869885132941328, -0.8782497375565528, -0.8695109618189728, -0.8607721860813928, -0.8520334103438129, -0.8432946346062329, -0.8345558588686529, -0.8258170831310729, -0.817078307393493, -0.808339531655913, -0.799600755918333, -0.790861980180753, -0.7821232044431731, -0.7733844287055931, -0.7646456529680131, -0.7559068772304331, -0.7471681014928532, -0.7384293257552732, -0.7296905500176932, -0.7209517742801133, -0.7122129985425333, -0.7034742228049533, -0.6947354470673733, -0.6859966713297934, -0.6772578955922134, -0.6685191198546334, -0.6597803441170534, -0.6510415683794735, -0.6423027926418935, -0.6335640169043135, -0.6248252411667335, -0.6160864654291536, -0.6073476896915736, -0.5986089139539936, -0.5898701382164137, -0.5811313624788337, -0.5723925867412537, -0.5636538110036737, -0.5549150352660938, -0.5461762595285138, -0.5374374837909338, -0.5286987080533538, -0.5199599323157739, -0.5112211565781939, -0.5024823808406139, -0.49374360510303394, -0.48500482936545397, -0.476266053627874, -0.467527277890294, -0.45878850215271405, -0.4500497264151341, -0.4413109506775541, -0.43257217493997413, -0.42383339920239416, -0.4150946234648142, -0.4063558477272342, -0.39761707198965424, -0.38887829625207426, -0.3801395205144943, -0.3714007447769143, -0.36266196903933434, -0.35392319330175437, -0.3451844175641744, -0.3364456418265944, -0.32770686608901445, -0.3189680903514345, -0.3102293146138545, -0.3014905388762745, -0.29275176313869455, -0.2840129874011146, -0.2752742116635346, -0.26653543592595463, -0.25779666018837466, -0.24905788445079466, -0.24031910871321466, -0.23158033297563466, -0.22284155723805465, -0.21410278150047465, -0.20536400576289465, -0.19662523002531465, -0.18788645428773465, -0.17914767855015465, -0.17040890281257465, -0.16167012707499465, -0.15293135133741464, -0.14419257559983464, -0.13545379986225464, -0.12671502412467464, -0.11797624838709464, -0.10923747264951464, -0.10049869691193464, -0.09175992117435464, -0.08302114543677463, -0.07428236969919463, -0.06554359396161463, -0.05680481822403463, -0.04806604248645463, -0.03932726674887463, -0.030588491011294627, -0.021849715273714626, -0.013110939536134627, -0.004372163798554627, 0.0043666119390253725, 0.013105387676605372, 0.021844163414185373, 0.030582939151765375, 0.039321714889345376, 0.04806049062692538, 0.05679926636450538, 0.06553804210208537, 0.07427681783966537, 0.08301559357724538, 0.09175436931482538, 0.10049314505240538, 0.10923192078998538, 0.11797069652756538, 0.12670947226514537, 0.13544824800272537, 0.14418702374030537, 0.15292579947788537, 0.16166457521546537, 0.17040335095304537, 0.17914212669062538, 0.18788090242820538, 0.19661967816578538, 0.20535845390336538, 0.21409722964094538, 0.22283600537852538, 0.23157478111610538, 0.24031355685368538, 0.24905233259126539, 0.2577911083288454, 0.26652988406642536, 0.27526865980400533, 0.2840074355415853, 0.2927462112791653, 0.30148498701674525, 0.3102237627543252, 0.3189625384919052, 0.3277013142294852, 0.33644008996706515, 0.3451788657046451, 0.3539176414422251, 0.36265641717980507, 0.37139519291738504, 0.380133968654965, 0.388872744392545, 0.39761152013012496, 0.40635029586770494, 0.4150890716052849, 0.4238278473428649, 0.43256662308044486, 0.44130539881802483, 0.4500441745556048, 0.4587829502931848, 0.46752172603076475, 0.4762605017683447, 0.4849992775059247, 0.49373805324350467, 0.5024768289810847, 0.5112156047186647, 0.5199543804562446, 0.5286931561938246, 0.5374319319314046, 0.5461707076689846, 0.5549094834065645, 0.5636482591441445, 0.5723870348817245, 0.5811258106193045, 0.5898645863568844, 0.5986033620944644, 0.6073421378320444, 0.6160809135696244, 0.6248196893072043, 0.6335584650447843, 0.6422972407823643, 0.6510360165199442, 0.6597747922575242, 0.6685135679951042, 0.6772523437326842, 0.6859911194702641, 0.6947298952078441, 0.7034686709454241, 0.7122074466830041, 0.720946222420584, 0.729684998158164, 0.738423773895744, 0.747162549633324, 0.7559013253709039, 0.7646401011084839, 0.7733788768460639, 0.7821176525836439, 0.7908564283212238, 0.7995952040588038, 0.8083339797963838, 0.8170727555339637, 0.8258115312715437, 0.8345503070091237, 0.8432890827467037, 0.8520278584842836, 0.8607666342218636, 0.8695054099594436, 0.8782441856970236, 0.8869829614346035, 0.8957217371721835, 0.9044605129097635, 0.9131992886473435, 0.9219380643849234, 0.9306768401225034, 0.9394156158600834, 0.9481543915976633, 0.9568931673352433, 0.9656319430728233, 0.9743707188104033, 0.9831094945479832, 0.9918482702855632, 1.0005870460231432, 1.0093258217607233, 1.0180645974983034, 1.0268033732358834, 1.0355421489734635, 1.0442809247110436, 1.0530197004486237, 1.0617584761862038, 1.0704972519237839, 1.079236027661364, 1.087974803398944, 1.0967135791365241, 1.1054523548741042, 1.1141911306116843, 1.1229299063492644, 1.1316686820868445, 1.1404074578244245, 1.1491462335620046, 1.1578850092995847, 1.1666237850371648, 1.1753625607747449, 1.184101336512325, 1.192840112249905, 1.2015788879874851, 1.2103176637250652, 1.2190564394626453, 1.2277952152002254, 1.2365339909378055, 1.2452727666753856, 1.2540115424129656, 1.2627503181505457, 1.2714890938881258, 1.280227869625706, 1.288966645363286, 1.297705421100866, 1.3064441968384461, 1.3151829725760262, 1.3239217483136063, 1.3326605240511864, 1.3413992997887665, 1.3501380755263466, 1.3588768512639267, 1.3676156270015067, 1.3763544027390868, 1.385093178476667, 1.393831954214247, 1.402570729951827, 1.4113095056894072, 1.4200482814269872, 1.4287870571645673, 1.4375258329021474, 1.4462646086397275, 1.4550033843773076, 1.4637421601148877, 1.4724809358524678, 1.4812197115900478, 1.489958487327628, 1.498697263065208, 1.507436038802788, 1.5161748145403682, 1.5249135902779483, 1.5336523660155283, 1.5423911417531084, 1.5511299174906885, 1.5598686932282686, 1.5686074689658487, 1.5773462447034288, 1.5860850204410089, 1.594823796178589, 1.603562571916169, 1.612301347653749, 1.6210401233913292, 1.6297788991289093, 1.6385176748664894, 1.6472564506040694, 1.6559952263416495, 1.6647340020792296, 1.6734727778168097, 1.6822115535543898, 1.6909503292919699, 1.69968910502955, 1.70842788076713, 1.7171666565047101, 1.7259054322422902, 1.7346442079798703, 1.7433829837174504, 1.7521217594550305, 1.7608605351926105, 1.7695993109301906, 1.7783380866677707, 1.7870768624053508, 1.7958156381429309, 1.804554413880511, 1.813293189618091, 1.8220319653556711, 1.8307707410932512, 1.8395095168308313, 1.8482482925684114, 1.8569870683059915, 1.8657258440435716, 1.8744646197811516, 1.8832033955187317, 1.8919421712563118, 1.900680946993892, 1.909419722731472, 1.918158498469052, 1.9268972742066321, 1.9356360499442122, 1.9443748256817923, 1.9531136014193724, 1.9618523771569525, 1.9705911528945326, 1.9793299286321127, 1.9880687043696927, 1.9968074801072728, 2.0055462558448527, 2.0142850315824328, 2.023023807320013, 2.031762583057593, 2.040501358795173, 2.049240134532753, 2.057978910270333, 2.0667176860079133, 2.0754564617454934, 2.0841952374830734, 2.0929340132206535, 2.1016727889582336, 2.1104115646958137, 2.119150340433394, 2.127889116170974, 2.136627891908554, 2.145366667646134, 2.154105443383714, 2.162844219121294, 2.1715829948588743, 2.1803217705964544, 2.1890605463340345, 2.1977993220716145, 2.2065380978091946, 2.2152768735467747, 2.224015649284355, 2.232754425021935, 2.241493200759515, 2.250231976497095, 2.258970752234675, 2.2677095279722552, 2.2764483037098353, 2.2851870794474154, 2.2939258551849955, 2.3026646309225756, 2.3114034066601556, 2.3201421823977357, 2.328880958135316, 2.337619733872896, 2.346358509610476, 2.355097285348056, 2.363836061085636, 2.3725748368232162, 2.3813136125607963, 2.3900523882983764, 2.3987911640359565, 2.4075299397735366, 2.4162687155111167, 2.4250074912486967, 2.433746266986277, 2.442485042723857, 2.451223818461437, 2.459962594199017, 2.468701369936597, 2.4774401456741773, 2.4861789214117573, 2.4949176971493374, 2.5036564728869175, 2.5123952486244976, 2.5211340243620777, 2.5298728000996578, 2.538611575837238, 2.547350351574818, 2.556089127312398, 2.564827903049978, 2.573566678787558, 2.5823054545251383, 2.5910442302627184, 2.5997830060002984, 2.6085217817378785, 2.6172605574754586, 2.6259993332130387, 2.6347381089506188, 2.643476884688199, 2.652215660425779, 2.660954436163359, 2.669693211900939, 2.678431987638519, 2.6871707633760993, 2.6959095391136794, 2.7046483148512594, 2.7133870905888395, 2.7221258663264196, 2.7308646420639997, 2.73960341780158, 2.74834219353916, 2.75708096927674, 2.76581974501432, 2.7745585207519, 2.78329729648948, 2.7920360722270603, 2.8007748479646404, 2.8095136237022205, 2.8182523994398005, 2.8269911751773806, 2.8357299509149607, 2.844468726652541, 2.853207502390121, 2.861946278127701, 2.870685053865281, 2.879423829602861, 2.8881626053404412, 2.8969013810780213, 2.9056401568156014, 2.9143789325531815, 2.9231177082907616, 2.9318564840283416, 2.9405952597659217, 2.949334035503502, 2.958072811241082, 2.966811586978662, 2.975550362716242, 2.984289138453822, 2.9930279141914022, 3.0017666899289823, 3.0105054656665624, 3.0192442414041425, 3.0279830171417226, 3.0367217928793027, 3.0454605686168827, 3.054199344354463, 3.062938120092043, 3.071676895829623, 3.080415671567203, 3.089154447304783, 3.0978932230423633, 3.1066319987799433, 3.1153707745175234, 3.1241095502551035, 3.1328483259926836, 3.1415871017302637]

ang_vector = np.array(ang_vector).reshape((720,1))
ang_vector.ravel()

# global variables
abs_yaw = 0.0 # yaw obtained from ceiling lines
std_dev  = 0.2
aisle_gap = 5.0#4.0

def wrapToPi(theta):
    return np.arctan2(np.sin(theta), np.cos(theta))

def abs_yaw_cb(msg):
    global abs_yaw
    ori = msg.pose.pose.orientation
    (_, _, abs_yaw) = euler_from_quaternion([ori.x, ori.y, ori.z, ori.w])


def findCorrectleftrightPair(left, right):
    left.sort()
    right.sort()

    leftPtr = 0
    rightPtr = 0

    heap = []

    while(leftPtr < len(left) and rightPtr < len(right)):
        if (left[leftPtr] + right[leftPtr]) >= (aisle_gap - std_dev) and (left[leftPtr] + right[leftPtr]) <= (aisle_gap + std_dev):
            # print("found correct pair, sending : {}".format(left[leftPtr] + right[rightPtr]))
            return [left[leftPtr], right[rightPtr]]
        elif left[leftPtr] + right[rightPtr] < (aisle_gap - std_dev):
            # push the current ptrs in the heap
            heappush(heap, (abs(aisle_gap - left[leftPtr] - right[rightPtr]), [left[leftPtr], right[rightPtr]]))
            # find the larger one
            if left[leftPtr] < right[rightPtr]:
                leftPtr += 1
            else:
                rightPtr += 1
        else:
            # print("couldn't find a bounded value, returning the next best thing!")
            return[999, 999]

def countCorrectLeftRightPairs(left, right):
    lenLeft = len(left)
    lenRight = len(right)

    count = 0
    if lenLeft <= lenRight:
        for i in range(lenLeft):
            estimated_ct = left[i] +  right[i]
            if abs(aisle_gap - estimated_ct) <= std_dev:
                count += 1
    else:
        for i in range(lenRight):
            estimated_ct = left[i] +  right[i]
            if abs(aisle_gap - estimated_ct) <= std_dev:
                count += 1

    return count

def scan_cb(msg):
    ranges = msg.ranges
    ranges_new = []
    ang_incr = msg.angle_increment

    idx_shift = int(abs_yaw / ang_incr)

    ranges_new = np.array(ranges).reshape(720,1)
    ang_vector_glob = ang_vector + abs_yaw
    ang_vector_glob = wrapToPi(ang_vector_glob)

    CT_DISTS = np.multiply(ranges_new, np.sin(ang_vector_glob)) # this is an array
    CT_DISTS_LIST = CT_DISTS.tolist()

    offset = 110
    # lets decide the boundaries
    start_right_idx  = 120 - idx_shift - offset
    end_right_idx    = 240 - idx_shift + offset
    start_left_idx = 480 - idx_shift - offset
    end_left_idx   = 600 - idx_shift + offset
    # print("left_start: {}, left_end : {}, right_start : {}, right_end : {}".format(start_left_idx, end_left_idx, start_right_idx, end_right_idx))

    left = []
    right = []
    # print(start_left_idx, end_left_idx, start_right_idx, end_right_idx)
    # print(len(CT_DISTS_LIST))
    for i in range(start_left_idx, end_left_idx + 1):
        if i >= 720:
            idx = i - 720
        elif i < 0:
            idx = 720 + i
        else:
            idx = i
        # print("left {}".format(idx))
        if abs(CT_DISTS_LIST[idx][0]) == float('inf'):
            continue
        left.append(CT_DISTS_LIST[idx][0])

    for i in range(start_right_idx, end_right_idx + 1):
        if i >= 720:
            idx = i - 720
        elif i < 0:
            idx = 720 + i
        else:
            idx = i
        # print("right {}".format(idx))
        if abs(CT_DISTS_LIST[idx][0]) == float('inf'):
            continue
        right.append(abs(CT_DISTS_LIST[idx][0]))


    # find average left and right
    avg_left = 0.0; avg_right = 0.0
    if len(left) > 0 and len(right) > 0:
        avg_left = sum(left) / len(left)
        avg_right = sum(right) / len(right)

    # leftVal, rightVal = findCorrectleftrightPair(left, right)

    print(avg_left, avg_right)
    # leftComp = leftVal - aisle_gap / 2
    # rightComp = aisle_gap / 2 - rightVal

    assumed_ag = avg_left + avg_right
    print("#############################################")
    print("assumed ag : {}".format(assumed_ag))

    # apart from the average values lets also check the count values
    count = countCorrectLeftRightPairs(left, right)
    mincountthresh = 110
    string_msg = String()
    if abs(aisle_gap - assumed_ag) <= std_dev and isCorrect(abs_yaw) and count > mincountthresh:
        print("This is the corridor! and the count is: {}".format(count))
        string_msg.data = "True"
    else:
        print("Not a corridor! and the count is: {}".format(count))
        string_msg.data = "False"
    is_corridor_pub.publish(string_msg)

def isCorrect(abs_yaw):
    window_angle = 40
    comp_angle = 90 - window_angle
    if (abs_yaw >= -m.radians(window_angle) and abs_yaw <= m.radians(window_angle)) or (abs(abs_yaw) >= m.radians(window_angle + 2*comp_angle)) :
        return True
    return False

if __name__ == "__main__":
    try:
        abs_yaw_sub = rospy.Subscriber("/abs_orientation_odom", Odometry, abs_yaw_cb)
        scan_sub = rospy.Subscriber("/jacky/laser/scan", LaserScan, scan_cb)

        rospy.spin()
    except rospy.ROSInterruptException:
        pass
